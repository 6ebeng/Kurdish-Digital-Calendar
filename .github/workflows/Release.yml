name: Release KDC

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags (e.g., v1.0.0)
  workflow_dispatch:
    # Allows manual trigger of the workflow

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.extract-version.outputs.version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Advanced Installer
      run: choco install advanced-installer

    - name: Determine Advanced Installer Path
      id: determine-ai-path
      shell: pwsh
      run: |
        $aiPath = (Get-ChildItem 'C:\Program Files (x86)\Caphyon\' -Directory | Where-Object { $_.Name -match 'Advanced Installer' } | Select-Object -Last 1).FullName + "\bin\x86\AdvancedInstaller.com"
        Write-Host "Determined Advanced Installer Path: $aiPath"
        echo "AI_PATH=$aiPath" >> $env:GITHUB_ENV 

    - name: Extract Version from Tag
      id: extract-version
      shell: pwsh
      run: |
        $tag = git describe --tags --abbrev=0
        if ($tag -match '^v([0-9]+\.[0-9]+\.[0-9]+)$') {
          $version = $matches[1]
          Write-Host "Extracted Version: $version"
          echo "version=$version" >> $env:GITHUB_OUTPUT
        } else {
          Write-Error "Tag does not match version pattern."
          exit 1
        }

    - name: Print Extracted Version (Debugging)
      shell: pwsh
      run: |
        Write-Host "Extracted Version in build job: ${{ steps.extract-version.outputs.version }}"

    - name: Update Installer Version
      shell: pwsh
      run: |
        $aiPath = "${{ env.AI_PATH }}"
        & $aiPath /edit "AI Setup Project/Kurdish Digital Calendar.aip" /SetVersion ${{ steps.extract-version.outputs.version }}

    - name: Decode and Save Certificate
      id: save-cert
      shell: pwsh
      env:
        CERT_BASE64: ${{ secrets.CERT_BASE64 }}
      run: |
        $certPath = "$env:USERPROFILE\certificate.pfx"
        [System.IO.File]::WriteAllBytes($certPath, [System.Convert]::FromBase64String($env:CERT_BASE64))
        echo "CERT_PATH=$certPath" >> $env:GITHUB_ENV

    - name: Set Digital Certificate in Advanced Installer
      shell: pwsh
      env:
        CERT_PATH: ${{ env.CERT_PATH }}
        CERT_PASSWORD: ${{ secrets.CERT_PASSWORD }}
      run: |
        $aiPath = "${{ env.AI_PATH }}"
        & $aiPath /edit "AI Setup Project/Kurdish Digital Calendar.aip" `
          /SetDigitalCertificateFile -file $env:CERT_PATH -password $env:CERT_PASSWORD -enable_signing

    - name: Build Advanced Installer project with Signing
      shell: pwsh
      run: |
        Write-Host "Using Advanced Installer Path: $env:AI_PATH"
        & $env:AI_PATH /rebuild "AI Setup Project/Kurdish Digital Calendar.aip"

    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: ./AI Setup Project/Kurdish Digital Calendar-Release-SetupFiles

  release:
    runs-on: windows-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.0'

    - name: Install github-changelog-generator
      run: gem install github_changelog_generator

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./AI Setup Project/Kurdish Digital Calendar-Release-SetupFiles

    - name: List files in artifact directory (debugging step)
      run: dir "./AI Setup Project/Kurdish Digital Calendar-Release-SetupFiles"

    - name: Print Version for Changelog Generation (Debugging)
      shell: pwsh
      env:
        VERSION: ${{ needs.build.outputs.version }}
      run: |
        Write-Host "Version for changelog generation: $env:VERSION"

    - name: Generate Changelog
      shell: pwsh
      env:
        VERSION: ${{ needs.build.outputs.version }}
      run: |
        Write-Host "Generating changelog for version $env:VERSION"
        github_changelog_generator `
          --user ${{ github.repository_owner }} `
          --project ${{ github.event.repository.name }} `
          --token ${{ secrets.PAT_TOKEN }} `
          --future-release $env:VERSION `
          --output CHANGELOG.md

    - name: Remove Changelog Generator Line
      shell: pwsh
      run: |
        (Get-Content CHANGELOG.md) -notmatch 'This Changelog was automatically generated by' | Set-Content CHANGELOG.md
        Write-Host "Removed generator line from CHANGELOG.md"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        tag_name: v${{ needs.build.outputs.version }}
        release_name: KDC release v${{ needs.build.outputs.version }}
        body_path: CHANGELOG.md  
        draft: false
        prerelease: false

    - name: Upload Installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./AI Setup Project/Kurdish Digital Calendar-Release-SetupFiles/KDC Installer.exe
        asset_name: KDC Installer x64/x86.exe
        asset_content_type: application/octet-stream